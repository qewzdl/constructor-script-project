package config

import (
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"os"
	"strings"
)

type Config struct {
	// Database
	DBHost      string
	DBPort      string
	DBUser      string
	DBPassword  string
	DBName      string
	DBSSLMode   string
	DatabaseURL string

	// Redis
	EnableRedis bool
	RedisURL    string

	// JWT
	JWTSecret                   string
	JWTSecretAutoGenerated      bool
	JWTSecretAutoGeneratedCause string

	// Server
	Port        string
	Environment string

	// CORS
	CORSOrigins []string

	// Upload
	UploadDir     string
	MaxUploadSize int64

	// Email
	SMTPHost     string
	SMTPPort     string
	SMTPUsername string
	SMTPPassword string
	SMTPFrom     string

	// Rate Limiting
	RateLimitRequests int
	RateLimitWindow   int
	RateLimitBurst    int

	// Comment Safety
	CommentRateLimitRequests        int
	CommentRateLimitWindow          int
	CommentNewUserRateLimitRequests int
	CommentNewUserRateLimitWindow   int
	CommentNewUserAgeHours          int
	CommentMinContentLength         int
	CommentMaxLinks                 int

	// Features
	EnableCache       bool
	EnableEmail       bool
	EnableMetrics     bool
	EnableCompression bool

	// Metrics security
	MetricsBasicAuthUsername string
	MetricsBasicAuthPassword string
	MetricsAllowedIPs        []string

	// Site Meta
	SiteName        string
	SiteDescription string
	SiteURL         string
	SiteFavicon     string

	// Backup
	BackupEncryptionKey string
	BackupS3Enabled     bool
	BackupS3Endpoint    string
	BackupS3AccessKey   string
	BackupS3SecretKey   string
	BackupS3Bucket      string
	BackupS3Region      string
	BackupS3UseSSL      bool
	BackupS3Prefix      string
}

func New() *Config {
	jwtSecret, autoGenerated, autoGeneratedCause := resolveJWTSecret()

	c := &Config{
		// Database
		DBHost:     getEnv("DB_HOST", "localhost"),
		DBPort:     getEnv("DB_PORT", "5432"),
		DBUser:     getEnv("DB_USER", "bloguser"),
		DBPassword: getEnv("DB_PASSWORD", "blogpassword"),
		DBName:     getEnv("DB_NAME", "blogdb"),
		DBSSLMode:  getEnv("DB_SSLMODE", "disable"),

		// Redis
		EnableRedis: getEnvAsBool("ENABLE_REDIS", true),
		RedisURL:    getEnv("REDIS_URL", "localhost:6379"),

		// JWT
		JWTSecret:                   jwtSecret,
		JWTSecretAutoGenerated:      autoGenerated,
		JWTSecretAutoGeneratedCause: autoGeneratedCause,

		// Server
		Port:        getEnv("PORT", "8080"),
		Environment: getEnv("ENVIRONMENT", "development"),

		// CORS
		CORSOrigins: strings.Split(getEnv("CORS_ORIGINS", "http://localhost:3000,http://localhost:8080"), ","),

		// Upload
		UploadDir:     getEnv("UPLOAD_DIR", "./uploads"),
		MaxUploadSize: 10 * 1024 * 1024, // 10MB

		// Email
		SMTPHost:     getEnv("SMTP_HOST", ""),
		SMTPPort:     getEnv("SMTP_PORT", "587"),
		SMTPUsername: getEnv("SMTP_USERNAME", ""),
		SMTPPassword: getEnv("SMTP_PASSWORD", ""),
		SMTPFrom:     getEnv("SMTP_FROM", "noreply@blog.com"),

		// Rate Limiting
		RateLimitRequests: getEnvAsInt("RATE_LIMIT_REQUESTS", 100),
		RateLimitWindow:   getEnvAsInt("RATE_LIMIT_WINDOW", 60),
		RateLimitBurst:    getEnvAsInt("RATE_LIMIT_BURST", 0),

		// Comment Safety
		CommentRateLimitRequests:        getEnvAsInt("COMMENT_RATE_LIMIT_REQUESTS", 12),
		CommentRateLimitWindow:          getEnvAsInt("COMMENT_RATE_LIMIT_WINDOW", 60),
		CommentNewUserRateLimitRequests: getEnvAsInt("COMMENT_NEW_USER_RATE_LIMIT_REQUESTS", 4),
		CommentNewUserRateLimitWindow:   getEnvAsInt("COMMENT_NEW_USER_RATE_LIMIT_WINDOW", 300),
		CommentNewUserAgeHours:          getEnvAsInt("COMMENT_NEW_USER_AGE_HOURS", 24),
		CommentMinContentLength:         getEnvAsInt("COMMENT_MIN_CONTENT_LENGTH", 10),
		CommentMaxLinks:                 getEnvAsInt("COMMENT_MAX_LINKS", 2),

		// Features
		EnableCache:       getEnvAsBool("ENABLE_CACHE", true),
		EnableEmail:       getEnvAsBool("ENABLE_EMAIL", false),
		EnableMetrics:     getEnvAsBool("ENABLE_METRICS", true),
		EnableCompression: getEnvAsBool("ENABLE_COMPRESSION", true),

		// Metrics security
		MetricsBasicAuthUsername: getEnv("METRICS_BASIC_AUTH_USERNAME", ""),
		MetricsBasicAuthPassword: getEnv("METRICS_BASIC_AUTH_PASSWORD", ""),
		MetricsAllowedIPs:        getEnvAsSlice("METRICS_ALLOWED_IPS"),

		// Site Meta
		SiteName:        getEnv("SITE_NAME", "Constructor Script"),
		SiteDescription: getEnv("SITE_DESCRIPTION", "Platform for building modern, high-performance websites using Go and templates."),
		SiteURL:         getEnv("SITE_URL", "http://localhost:8081"),
		SiteFavicon:     getEnv("SITE_FAVICON", "/favicon.ico"),

		// Backup
		BackupEncryptionKey: getEnv("BACKUP_ENCRYPTION_KEY", ""),
		BackupS3Enabled:     getEnvAsBool("BACKUP_S3_ENABLED", false),
		BackupS3Endpoint:    getEnv("BACKUP_S3_ENDPOINT", ""),
		BackupS3AccessKey:   getEnv("BACKUP_S3_ACCESS_KEY", ""),
		BackupS3SecretKey:   getEnv("BACKUP_S3_SECRET_KEY", ""),
		BackupS3Bucket:      getEnv("BACKUP_S3_BUCKET", ""),
		BackupS3Region:      getEnv("BACKUP_S3_REGION", ""),
		BackupS3UseSSL:      getEnvAsBool("BACKUP_S3_USE_SSL", true),
		BackupS3Prefix:      getEnv("BACKUP_S3_PREFIX", ""),
	}

	// Build DSN
	c.DatabaseURL = fmt.Sprintf(
		"postgres://%s:%s@%s:%s/%s?sslmode=%s",
		c.DBUser, c.DBPassword, c.DBHost, c.DBPort, c.DBName, c.DBSSLMode,
	)

	if c.RateLimitRequests < 0 {
		c.RateLimitRequests = 0
	}

	if c.RateLimitWindow <= 0 {
		c.RateLimitWindow = 60
	}

	if c.RateLimitBurst <= 0 {
		if c.RateLimitRequests > 0 {
			c.RateLimitBurst = c.RateLimitRequests * 2
		} else {
			c.RateLimitBurst = 0
		}
	}

	if c.RateLimitBurst > 0 && c.RateLimitRequests > 0 && c.RateLimitBurst < c.RateLimitRequests {
		c.RateLimitBurst = c.RateLimitRequests
	}

	if c.CommentRateLimitRequests < 0 {
		c.CommentRateLimitRequests = 0
	}

	if c.CommentRateLimitWindow <= 0 {
		c.CommentRateLimitWindow = 60
	}

	if c.CommentNewUserRateLimitRequests < 0 {
		c.CommentNewUserRateLimitRequests = c.CommentRateLimitRequests
	}

	if c.CommentNewUserRateLimitWindow <= 0 {
		c.CommentNewUserRateLimitWindow = c.CommentRateLimitWindow
	}

	if c.CommentNewUserAgeHours < 0 {
		c.CommentNewUserAgeHours = 24
	}

	if c.CommentMinContentLength < 1 {
		c.CommentMinContentLength = 3
	}

	if c.CommentMaxLinks < -1 {
		c.CommentMaxLinks = -1
	}

	return c
}

func getEnv(key, defaultValue string) string {
	if value, ok := getEnvWithPresence(key); ok {
		return value
	}
	return defaultValue
}

func getEnvWithPresence(key string) (string, bool) {
	if value, ok := os.LookupEnv(key); ok {
		value = strings.TrimSpace(value)
		if value != "" {
			return value, true
		}
	}
	return "", false
}

func getEnvAsInt(key string, defaultValue int) int {
	valueStr, ok := getEnvWithPresence(key)
	if !ok {
		return defaultValue
	}
	var value int
	_, err := fmt.Sscanf(valueStr, "%d", &value)
	if err != nil {
		return defaultValue
	}
	return value
}

func generateSecureRandomString(length int) string {
	if length <= 0 {
		length = 32
	}

	bytes := make([]byte, length)
	if _, err := rand.Read(bytes); err != nil {
		// Fallback to deterministic string to avoid returning empty secret
		return "constructor-script-auto-generated-secret"
	}

	return base64.RawURLEncoding.EncodeToString(bytes)
}

func resolveJWTSecret() (string, bool, string) {
	if secret, ok := getEnvWithPresence("JWT_SECRET"); ok {
		if len(secret) >= 32 {
			return secret, false, ""
		}
		return generateSecureRandomString(48), true, "provided secret too short"
	}

	generated := generateSecureRandomString(48)
	return generated, true, "missing JWT_SECRET environment variable"
}

func getEnvAsBool(key string, defaultValue bool) bool {
	valueStr := getEnv(key, "")
	if valueStr == "" {
		return defaultValue
	}
	return valueStr == "true" || valueStr == "1"
}

func getEnvAsSlice(key string) []string {
	value, ok := getEnvWithPresence(key)
	if !ok {
		return nil
	}

	parts := strings.Split(value, ",")
	result := make([]string, 0, len(parts))
	for _, part := range parts {
		trimmed := strings.TrimSpace(part)
		if trimmed != "" {
			result = append(result, trimmed)
		}
	}

	return result
}

func (c *Config) IsDevelopment() bool {
	return c.Environment == "development"
}

func (c *Config) IsProduction() bool {
	return c.Environment == "production"
}
